---
title: "Black-formatter Example"
jupyter: python3
format: 
  # ipynb
  # html
  html:
   code-fold: true
   code-tools: true
filters:
  - black-formatter
embed-resources: true
---

# Import libraries and data file
```{python}
import pandas as pd
import numpy as np
import gurobipy as gp
from gurobipy import GRB
import itertools

# xl = pd.ExcelFile("./SouthVietnam.xlsx")
xl = pd.ExcelFile("./SouthVietnam_change_firms_location.xlsx")
list_sheets = xl.sheet_names
print(list_sheets)
```

<!--
 !           ╭───────────────────────────────────────────────────────╮
 !           │                         DATA:                         │
 !           ╰───────────────────────────────────────────────────────╯
-->

# Population and supply
```{python}
population_df = pd.read_excel(
    xl, sheet_name="Population", engine="openpyxl", index_col=0
)

supply_df = population_df.copy()
nb_of_periods = 6
growth_rate_a_year = 1 + 0.12
growth_rate_a_period = 1 + (growth_rate_a_year - 1) / 6
# waste_per_person_per_month = 0.8
# waste_per_person_per_year = waste_per_person_per_month * 12
waste_per_person_per_year = 3.7
sum_of_power = (growth_rate_a_period**nb_of_periods - 1) / (
    growth_rate_a_period - 1
)
supply_df["Supply of a year"] = (
    supply_df["Populations"] * waste_per_person_per_year
)

# Initialize periods
for i in range(1, nb_of_periods + 1):
    supply_df[i] = np.nan
for i in supply_df.index:
    supply_df[1].loc[i] = int(
        supply_df.loc[i]["Supply of a year"] / sum_of_power
    )
for index in supply_df.index:
    for i in range(2, nb_of_periods + 1):
        supply_df[i].loc[index] = int(
            supply_df[i - 1].loc[index] * growth_rate_a_period
        )
print(supply_df)
```

# Supply of products
```{python}
# Share of products
product_shares = pd.read_excel(
    xl, sheet_name="Product_shares", index_col="Products"
)

def supply_of_product(periods, generation_points, products):
    return float(
        supply_df[periods].loc[generation_points]
        * product_shares["Share"].loc[products]
    )

print(type(supply_of_product(1, "An Giang", "TV")))
```

# Fixed costs of establishing and operating collection centers
```{python}
establishing_cc_cost_df = pd.read_excel(
    xl, sheet_name="Establishing_cc", index_col=0
)

def establishing_cc_cost(periods):
    return float(establishing_cc_cost_df.loc[periods]["Cost"])
```

# Distance from generation points to collection centers
```{python}
# WARNING: Not test with Gurobi
distance_gp_cc_df = pd.read_excel(
    xl, sheet_name="Distance", engine="openpyxl", index_col=1
)
distance_gp_cc_df = distance_gp_cc_df.drop("No", axis=1)

def distance_gp_cc(generation_points, collection_centers):
    return float(distance_gp_cc_df[generation_points].loc[collection_centers])
```

# Distance from collection center to firms
```{python}
# WARNING: Not test with Gurobi
distance_cc_firm_df = pd.read_excel(
    xl, sheet_name="DistancefromCCtoFirm", engine="openpyxl", index_col=0
)

def distance_cc_firm(collection_centers, firms):
    return float(distance_cc_firm_df[firms].loc[collection_centers])
```

# Unit transportation cost of truck to deliver products 
```{python}
transportation_cost_df = pd.read_excel(
    xl, sheet_name="Unit_transportation_cost", index_col=0
)


def transportation_cost_ij(periods):
    return float(transportation_cost_df["GP to CC"].loc[periods])

def transportation_cost_jf(periods):
    return float(transportation_cost_df["CC to Firm"].loc[periods])
```

# Stepwise quantity points
```{python}
inventory_quantity_points_df = pd.read_excel(
    xl, sheet_name="Inventory_quantity_points", index_col=0
)
inventory_quantity_points = range(1, len(inventory_quantity_points_df) + 1)


def Q(inventory_quantity_points, products):
    return float(
        inventory_quantity_points_df[products].loc[inventory_quantity_points]
    )
```

# Stepwise unit inventory cost
```{python}
inventory_holding_costs_df = pd.read_excel(
    xl, sheet_name="Inventory_holding_costs"
)

def stepwise_inventory_unit_costs(periods, inventory_quantity_points, products):
    return float(
        inventory_holding_costs_df[
            (inventory_holding_costs_df["Period"] == periods)
            & (inventory_holding_costs_df["Step"] == inventory_quantity_points)
        ][products].item()
    )
print(stepwise_inventory_unit_costs(1, 2, "TV"))
```

# Unit transportation cost of products sent from collection centers to firms
```{python}
# transportation_cost_df = pd.read_excel(xl, sheet_name="transportation_costs")
# print(transportation_cost_df)
```

# Location Index
```{python}
fixed_costs_df = pd.read_excel(
xl,
    # "./SouthVietnam_change_firms_location.xlsx",
    sheet_name="Location Index",
    # engine="openpyxl",
    index_col=0,
)
fixed_costs_df["Fixed_costs"] = np.nan
x = fixed_costs_df["Populations"].sum()
for i in fixed_costs_df.index:
    fixed_costs_df["Fixed_costs"][i] = 1 + fixed_costs_df["Populations"][i] / x
print(fixed_costs_df)
```

# Container Capacities / Truck capacities
```{python}
container_capacities_df = pd.read_excel(
    xl, sheet_name="ContainerCapacities", engine="openpyxl", index_col=0
)
def vehicle_cap(truck_types, products):
    return float(container_capacities_df[products].loc[truck_types])
```

<!--
 !           ╭───────────────────────────────────────────────────────╮
 !           │                         INDEX                         │
 !           ╰───────────────────────────────────────────────────────╯
-->
# Index
```{python}
index_df = pd.read_excel(xl, sheet_name="Index")


def values_of_column(x):
    return index_df[x].dropna().unique()


products = values_of_column("Products")
generation_points = values_of_column("Generation points")
collection_centers = values_of_column("Collection centers")
firms = values_of_column("Firms")
periods = values_of_column("Periods")
periods = periods.astype(int)
truck_types = values_of_column("Truck types")
```

# Demand of firms
```{python}
firms_share = pd.read_excel(xl, sheet_name="Firms_demand", index_col=0)
def demand_of_firms(firms, products):
    sum_of_supply_of_products = sum(supply_of_product(t, i, products) for t in periods for i in generation_points)
    return sum_of_supply_of_products * firms_share[firms].loc[products]
# print(demand_of_firms("Firm A", "TV"))
```

# Model Parameters and Variables
```{python}
model = gp.Model("")
LC = 10000000
SC = 0.0000001

# Variable
model.setParam("MIPGap", 0.000)
model.setParam("TimeLimit", 3600)


x = model.addVars(
    periods,
    generation_points,
    collection_centers,
    products,
)
w = model.addVars(
    periods,
    collection_centers,
    firms,
    products,
)
inventory = model.addVars(
    periods,
    collection_centers,
    products,
)
e = model.addVars(firms, products, lb=-GRB.INFINITY, ub=0)
y = model.addVars(
    periods,
    collection_centers,
    vtype=GRB.BINARY,
)
z = model.addVars(
    periods,
    collection_centers,
    truck_types,
    products,
    vtype=GRB.BINARY,
)
u = model.addVars(
    periods,
    inventory_quantity_points,
    collection_centers,
    products,
    vtype=GRB.BINARY,
)
g = model.addVars(
    periods,
    inventory_quantity_points,
    collection_centers,
    products,
    # vtype=GRB.BINARY,
)

s = model.addVars(
    periods,
    generation_points,
    collection_centers,
    products,
    truck_types,
    vtype=GRB.INTEGER,
)

v = model.addVars(
    periods, collection_centers, firms, products, truck_types, vtype=GRB.INTEGER
)

inventory_holding_unit_costs = model.addVars(
    periods,
    collection_centers,
    products,
)


# OBJECTIVES
TC_gp_cc = gp.quicksum(transportation_cost_ij(t)*distance_gp_cc(i,j)*s[t, i, j, p, k] for t in periods for i in generation_points for j in collection_centers for p in products for k in truck_types)
TC_cc_firms = gp.quicksum(transportation_cost_jf(t) * distance_cc_firm(j,f) * v[t,j,f,p,k] for t in periods for j in collection_centers for f in firms for p in products for k in truck_types)
# Costs_of_inventory = gp.quicksum(stepwise_inventory_unit_costs(t, a, p)*g[t,a,j,p] for t in periods for a in inventory_quantity_points for j in collection_centers for p in products)
Costs_of_inventory = gp.quicksum(stepwise_inventory_unit_costs(t, 1, p)*g[t,1,j,p] for t in periods for j in collection_centers for p in products)
# Costs_of_establising_cc = gp.quicksum(establishing_cc_cost(t) * (y[t,j]-y[t-1,j]) for t in periods for j in collection_centers if t-1 in periods)
Costs_of_establising_cc = gp.quicksum(establishing_cc_cost(t) * (y[t,j]-y[t-1,j]) for t in periods for j in collection_centers if t-1 in periods) + gp.quicksum(establishing_cc_cost(1)*y[1,j] for j in collection_centers)

model.update()

model.setObjective(
TC_gp_cc+ TC_cc_firms+ Costs_of_inventory
+ Costs_of_establising_cc
)

# Constraint: (3)
model.addConstrs(
    gp.quicksum(x[t, i, j, p] for j in collection_centers)
    ==  supply_of_product(t, i, p)
    for t in periods
    for i in generation_points
    for p in products
)

# Constraint: (4)
model.addConstrs(
    gp.quicksum(x[t, i, j, p] for i in generation_points)
    + inventory[t - 1, j, p]
    == gp.quicksum(w[t, j, f, p] for f in firms) + inventory[t,j,p]
    for j in collection_centers
    for p in products
    for t in periods
    if t - 1 in periods
)
# model.addConstr(inventory[2, "Ho Chi Minh", "TV"] == 100)
model.addConstrs(
    gp.quicksum(x[1, i, j, p] for i in generation_points)
    == gp.quicksum(w[1, j, f, p] for f in firms) + inventory[1,j,p]
    for j in collection_centers
    for p in products
)
# difference_in_collection_center = model.addVars(products, collection_centers, products)
# model.addConstrs(difference_in_collection_center ==
#     gp.quicksum(x[t, i, j, p] for i in generation_points) -
#     gp.quicksum(w[t, j, f, p] for f in firms) 
#     for j in collection_centers
#     for p in products
#     for t in periods
#     if t - 1 in periods
# )

# WARNING: Constraint: (5)
# model.addConstrs(
#     gp.quicksum(w[t, j, f, p] for t in periods for j in collection_centers for t in periods)
#     == demand_of_firms(f,p) + e[f, p] # WARNING: D is parameter, not variable
#     for f in firms
#     for p in products
# )

# Constraint: (6)


# Constraint: (7)
# model.addConstrs(gp.quicksum(x[t,i,j,p] for i in generation_points) <= y[t,j] for j in collection_centers for p in products for t in periods)

# Constraint: (8)
model.addConstrs(
    y[t - 1, j] <= y[t, j]
    for j in collection_centers
    for t in periods
    if t - 1 in periods
)

# Constraint: (9)
# model.addConstrs(y[])

# Constraint: (10)

# Constraint: (11)

# Constraint: (14)
model.addConstrs(
    inventory_holding_unit_costs[t, j, p]
    == gp.quicksum(
        stepwise_inventory_unit_costs(t, a, p) * u[t, a, j, p]
        for a in inventory_quantity_points
        if a + 1 in inventory_quantity_points
    )
    for t in periods
    for j in collection_centers
    for p in products
)

# Constraint: (15)
model.addConstrs(
    gp.quicksum(
        u[t, a, j, p] * Q(a, p)
        for a in inventory_quantity_points
        if a + 1 in inventory_quantity_points
    )
    <= inventory[t, j, p]
    for j in collection_centers
    for p in products
    for t in periods
)
model.addConstrs(
    inventory[t, j, p]
    <= gp.quicksum(
        u[t, a, j, p] * Q(a + 1, p)
        for a in inventory_quantity_points
        if a + 1 in inventory_quantity_points
    )
    for j in collection_centers
    for p in products
    for t in periods
)

# Constraint: (16)
model.addConstrs(
    LC * (u[t, a, j, p] - 1) + inventory[t, j, p] <= g[t, a, j, p]
    for j in collection_centers
    for p in products
    for t in periods
    for a in inventory_quantity_points
    if a + 1 in inventory_quantity_points
)
model.addConstrs(
    g[t, a, j, p] <= LC * (1 - u[t, a, j, p]) + inventory[t, j, p]
    for j in collection_centers
    for p in products
    for t in periods
    for a in inventory_quantity_points
    if a + 1 in inventory_quantity_points
)

# Constraint: (17)
model.addConstrs(
    -LC * u[t, a, j, p] <= g[t, a, j, p]
    for j in collection_centers
    for p in products
    for t in periods
    for a in inventory_quantity_points
    if a + 1 in inventory_quantity_points
)
model.addConstrs(
    g[t, a, j, p] <= LC * u[t, a, j, p]
    for j in collection_centers
    for p in products
    for t in periods
    for a in inventory_quantity_points
    if a + 1 in inventory_quantity_points
)

# Constraint: (18)
model.addConstrs(
    gp.quicksum(
        u[t, a, j, p]
        for a in inventory_quantity_points
        if a + 1 in inventory_quantity_points
    )
    == 1
    for j in collection_centers
    for t in periods
    for p in products
)

# Constraint: (19)

# Constraint: (20)
model.addConstrs(
    gp.quicksum(vehicle_cap(k, p) * v[t, j, f, p, k]
    - vehicle_cap(k, p)
    + vehicle_cap(k, p) * SC for k in truck_types)
    <= w[t, j, f, p]
    for t in periods
    for j in collection_centers
    for f in firms
    for p in products
    # for k in truck_types
)
model.addConstrs(
    w[t, j, f, p] <= gp.quicksum(vehicle_cap(k, p) * v[t, j, f, p, k] for k in truck_types)
    for t in periods
    for j in collection_centers
    for f in firms
    for p in products
    # for k in truck_types
)

# Constraint: (21)
model.addConstrs(
    gp.quicksum(vehicle_cap(k, p) * s[t, i, j, p, k]
    - vehicle_cap(k, p)
    + vehicle_cap(k, p) * SC for k in truck_types)
    <= x[t, i, j, p]
    for t in periods
    for j in collection_centers
    for i in generation_points
    for p in products
    # for k in truck_types
)
model.addConstrs(
    x[t, i, j, p] <= gp.quicksum(vehicle_cap(k, p) * s[t, i, j, p, k] for k in truck_types)
    for t in periods
    for j in collection_centers
    for i in generation_points
    for p in products
    # for k in truck_types
)

# Constraint: (22)
model.addConstrs(
    -LC * y[t, j] <= x[t, i, j, p]
    for t in periods
    for i in generation_points
    for j in collection_centers
    for p in products
)
model.addConstrs(
    x[t, i, j, p] <= LC * y[t, j]
    for t in periods
    for i in generation_points
    for j in collection_centers
    for p in products
)

model.optimize()
```

```{python}
print("Transportation costs from generation points to collection centers:", TC_gp_cc.getValue())
print("Transportation costs from collection centers to geneation points:", TC_cc_firms.getValue())
print("Costs of establigin collection center:", Costs_of_establising_cc.getValue())
print("Costs of inventory:",Costs_of_inventory.getValue())
for t,j in itertools.product(periods, collection_centers):
    print(t, j, y[t,j].X)
```

```{python}
for t,j,p in itertools.product(periods, collection_centers, products):
    print("Periods:", t, "collection centers:", j, "products:", p, "amount:", sum(x[t,i,j,p].X for  i in generation_points))
# print(x[t, i, j, p].X for t in periods for i in generation_points for j in collection_centers for p in products)
# x_values= [ x[t, i, j, p].X for t in periods for i in generation_points for j in collection_centers for p in products ]# print(TC_1)
# x_values = np.array(x_values)
# x_values=x_values.reshape(len(periods), len(generation_points), len(collection_centers), len(products))
# print(x_values.shape)
```

```{python}
for t, j, p in itertools.product(periods, collection_centers, products):
    print(f"Periods {t} collection center {j} with amount of product {p}: {sum(w[t,j,f,p].X for f in firms)}")
```

```{python}
model.dispose()
```

```{python}
# for j in collection_centers:
#     print(y[1,j])
```

```{python}
# for t, j, p in itertools.product(periods, collection_centers, products):
#     print("difference: ", sum(x[t,i,j,p].X for i in generation_points)-sum(w[t,j,f,p].X for f in firms))
#     print("Inventory", inventory[t,j,p].X)
```

```{python}
# for t,a, j, p in itertools.product(periods,inventory_quantity_points, collection_centers, products):
#     print("inventory: ", g[t,a,j,p].X)
```

```{python}
# for t, j, p in itertools.product(periods, collection_centers, products):
#     print(p, inventory[t, j, p].X)
```

```{python}
# for t, a, j, p in itertools.product(periods, inventory_quantity_points, collection_centers, products):
#     print(f"Periods {t}, {j}, inventory points {a} for product {p}: {g[t,a,j,p].X}")
```

```{python}
# for f, p in itertools.product(firms, products):
#     print(e[f,p].X)
```

```{python}
# for t, j, p in itertools.product(periods, collection_centers, products):
#     print(sum(g[t, a, j, p].X for a in inventory_quantity_points) -  inventory[t, j, p].X)
```

```{python}
# for t, i,j,p,k in itertools.product(periods, generation_points, collection_centers, products, truck_types):
#     print(s[t,i,j,p,k])
```
